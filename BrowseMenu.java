/**
* This page lets the user search for specific books, either by title, author or genre â€“ they can then use the bottom search bar to access the specific page for that book
* Author: Luke Cihra
* Date Created: October 17, 2020
* Last Modified: November 2, 2020
* Assumptions: 
**/

//allows page to read from external file, 
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class BrowseMenu extends javax.swing.JFrame {

    //preparing to read from books.txt
    File bookStuff = new File("books.txt");
    Scanner bookInfo;

    private Customer customer;

    /**
     * Creates new form BrowseMenu
     */
    public BrowseMenu(Customer customer) {
        this.customer = customer;
        initComponents();
        try {
            this.bookInfo = new Scanner(bookStuff);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(BrowseMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//end of method BrowseMenu

     /**
     * resets scanner reading external books.txt file to start at beginning
     */
    public void readReset() throws IOException {
        File bookStuff = new File("books.txt");
        bookInfo = new Scanner(bookStuff);
    }//end of method readReset

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        searchBar1 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuLogo = new javax.swing.JMenu();
        menuRecommended = new javax.swing.JMenu();
        menuRandom = new javax.swing.JMenu();
        menuBrowse = new javax.swing.JMenu();
        menuRated = new javax.swing.JMenu();
        menuAdd = new javax.swing.JMenu();
        menuClubs = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(67, 55, 53));
        jLabel2.setText("Browse");

        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        searchBar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBar1ActionPerformed(evt);
            }
        });

        searchButton1.setText("Go To Book");
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        menuLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("logo_Menu.png"))); // NOI18N
        menuLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuLogoMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuLogo);

        menuRecommended.setText("Recommended");
        menuRecommended.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuRecommended.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuRecommendedMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuRecommended);

        menuRandom.setText("Random");
        menuRandom.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuRandom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuRandomMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuRandom);

        menuBrowse.setText("Main Menu");
        menuBrowse.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuBrowseMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuBrowse);

        menuRated.setText("Books You've Rated");
        menuRated.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuRated.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuRatedMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuRated);

        menuAdd.setText("Add Books");
        menuAdd.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAddMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuAdd);

        menuClubs.setText("Clubs");
        menuClubs.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuBar1.add(menuClubs);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
                .createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup().addGroup(layout
                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup().addGap(296, 296, 296).addComponent(jLabel2))
                                .addGroup(layout.createSequentialGroup().addContainerGap()
                                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 268,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchButton)))
                                .addGap(0, 311, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane2)))
                .addContainerGap())
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addComponent(searchBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 268,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(searchButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                javax.swing.GroupLayout.Alignment.TRAILING,
                layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2).addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchBar1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchButton1))
                        .addGap(25, 25, 25)));

        pack();
    }//end of initComponents

    /**
    * Displays list of books which pertain to search made by user in upper searchbar
    */    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchButtonActionPerformed
        try {
            readReset();//starts scanner at beginning of books.txt to compare all books listed with user's search
        } catch (IOException ex) {
            Logger.getLogger(BrowseMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextArea2.setText("");//sets jTextArea2 (where book list is displays) blank in case there are books listed there from a prior search
        String searched = "";//stores string entered in upper search bar by user
        searched = searchBar.getText();
        String theTitle = "";//stores titles of books in books.txt to be compared to searched
        while (bookInfo.hasNextLine()) {
            theTitle = bookInfo.nextLine();

            String[] title = theTitle.split(",");//stores all the book's title, author and genre in the database and splits each of the aforementioned 3 areas by commas

            if (theTitle.toLowerCase().contains(searched.toLowerCase())) { //displays list of books with information that matches what the user searched
                jTextArea2.setText(jTextArea2.getText() + String.join("", (title[0] + " by: " + title[1])) + "\n");
            }
        }
    }//end event searchButtonActionPerformed

    /**
    * Goes to "Recommended" page when button in menu bar is clicked
    */ 
    private void menuRecommendedMouseClicked(java.awt.event.MouseEvent evt) {
        new Recommend(customer).setVisible(true);
        this.setVisible(false);
    }//end event menuRecommendedMouseClicked

    /**
    * Goes to "Random" page when button in menu bar is clicked
    */ 
    private void menuRandomMouseClicked(java.awt.event.MouseEvent evt) {
        new RandomBook(customer).setVisible(true);
        this.setVisible(false);
    }//end event menuRandomMouseClicked

    /**
    * Returns to the main menu when the "Browse" button in menu bar is clicked
    */ 
    private void menuBrowseMouseClicked(java.awt.event.MouseEvent evt) {
        new mainMenu(customer).setVisible(true);
        this.setVisible(false);
    }//end event menuBrowseMouseClicked

    /**
    * Goes to "Books You've Rated" page when button in menu bar is clicked
    */ 
    private void menuRatedMouseClicked(java.awt.event.MouseEvent evt) {
        try {
            new SeeRated(customer).setVisible(true);
            this.setVisible(false);
        } catch (IOException e) {
            // Auto-generated catch block
            e.printStackTrace();
        }
    }//end event menuRatedMouseClicked

    /**
    * Goes to "Add Books" page when button in menu bar is clicked
    */ 
    private void menuAddMouseClicked(java.awt.event.MouseEvent evt) {
        try {
            new addBooks(customer).setVisible(true);
            this.setVisible(false);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }//end event menuAddMouseClicked

    /**
    * Accesses specific book page for book searched for in lower search bar by user
    */ 
    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt)  {//GEN-FIRST:event_searchButton1ActionPerformed
        try {
            readReset(); //starts scanner at beginning of books.txt to compare all books listed with user's search
        } catch (IOException ex) {
            Logger.getLogger(BrowseMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String searched = "";//stores string entered in lower search bar by user
        searched = searchBar1.getText();
        String theTitle = "";//stores titles of books in books.txt to be compared to searched
        int lineNumber = 0; //stores line number of book info in theTitle in the external text file books.txt
        while (bookInfo.hasNextLine()) {
            theTitle =  bookInfo.nextLine();
            lineNumber += 1;

            String [] title = theTitle.split(",");

            if(title[0].toLowerCase().equals(searched.toLowerCase())){
                try {
                    new BookPage(title[0], title[1], lineNumber, customer).setVisible(true); //if user's search matches a book, go to that book's page. otherwise, do nothing
                } catch (IOException ex) {
                    Logger.getLogger(BrowseMenu.class.getName()).log(Level.SEVERE, null, ex); 
                }
                this.setVisible(false);
                break;
            }//end of if statement taking user to page for book matching what's input into the lower search bar
        }//end of while loop cycling through books in books.txt to compare to what's input into the lower search bar
    }//end of event searchButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BrowseMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BrowseMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BrowseMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BrowseMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //try {
              //     new BrowseMenu().setVisible(true);
              //  } catch (FileNotFoundException ex) {
               //     Logger.getLogger(BrowseMenu.class.getName()).log(Level.SEVERE, null, ex);
             //   }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JMenu menuAdd;
    private javax.swing.JMenu menuBrowse;
    private javax.swing.JMenu menuClubs;
    private javax.swing.JMenu menuLogo;
    private javax.swing.JMenu menuRandom;
    private javax.swing.JMenu menuRated;
    private javax.swing.JMenu menuRecommended;
    private javax.swing.JTextField searchBar;
    private javax.swing.JTextField searchBar1;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    // End of variables declaration//GEN-END:variables
}//end of BrowseMenu class
